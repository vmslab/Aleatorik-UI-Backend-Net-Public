//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TriggerJobService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyValue", Namespace="http://schemas.datacontract.org/2004/07/Mozart.Deployment.JobScheduler")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TriggerJobService.KeyValue[]))]
    public partial struct KeyValue
    {
        
        private string KeyField;
        
        private object ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key
        {
            get
            {
                return this.KeyField;
            }
            set
            {
                this.KeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TriggerJobService.ITriggerJobService")]
    public interface ITriggerJobService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/Fire", ReplyAction="http://tempuri.org/ITriggerJobService/FireResponse")]
        System.Threading.Tasks.Task FireAsync(string triggerName, string password, int delaySec, bool makeDisable, TriggerJobService.KeyValue[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/FireUser", ReplyAction="http://tempuri.org/ITriggerJobService/FireUserResponse")]
        System.Threading.Tasks.Task FireUserAsync(string triggerName, string userID, string password, int delaySec, bool makeDisable, TriggerJobService.KeyValue[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/IsCurrentlyExecuting", ReplyAction="http://tempuri.org/ITriggerJobService/IsCurrentlyExecutingResponse")]
        System.Threading.Tasks.Task<bool> IsCurrentlyExecutingAsync(string triggerName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/IsCurrentlyExecutingUser", ReplyAction="http://tempuri.org/ITriggerJobService/IsCurrentlyExecutingUserResponse")]
        System.Threading.Tasks.Task<bool> IsCurrentlyExecutingUserAsync(string triggerName, string userID, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/Interrupt", ReplyAction="http://tempuri.org/ITriggerJobService/InterruptResponse")]
        System.Threading.Tasks.Task InterruptAsync(string triggerName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/InterruptUser", ReplyAction="http://tempuri.org/ITriggerJobService/InterruptUserResponse")]
        System.Threading.Tasks.Task InterruptUserAsync(string triggerName, string userID, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/Pause", ReplyAction="http://tempuri.org/ITriggerJobService/PauseResponse")]
        System.Threading.Tasks.Task PauseAsync(string triggerName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITriggerJobService/PauseUser", ReplyAction="http://tempuri.org/ITriggerJobService/PauseUserResponse")]
        System.Threading.Tasks.Task PauseUserAsync(string triggerName, string userID, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface ITriggerJobServiceChannel : TriggerJobService.ITriggerJobService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class TriggerJobServiceClient : System.ServiceModel.ClientBase<TriggerJobService.ITriggerJobService>, TriggerJobService.ITriggerJobService
    {
        
        /// <summary>
        /// 서비스 엔드포인트를 구성하려면 이 부분 메서드를 구현합니다.
        /// </summary>
        /// <param name="serviceEndpoint">구성할 엔드포인트</param>
        /// <param name="clientCredentials">클라이언트 자격 증명</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TriggerJobServiceClient() : 
                base(TriggerJobServiceClient.GetDefaultBinding(), TriggerJobServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_ITriggerJobService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TriggerJobServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TriggerJobServiceClient.GetBindingForEndpoint(endpointConfiguration), TriggerJobServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TriggerJobServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TriggerJobServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TriggerJobServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TriggerJobServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TriggerJobServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task FireAsync(string triggerName, string password, int delaySec, bool makeDisable, TriggerJobService.KeyValue[] args)
        {
            return base.Channel.FireAsync(triggerName, password, delaySec, makeDisable, args);
        }
        
        public System.Threading.Tasks.Task FireUserAsync(string triggerName, string userID, string password, int delaySec, bool makeDisable, TriggerJobService.KeyValue[] args)
        {
            return base.Channel.FireUserAsync(triggerName, userID, password, delaySec, makeDisable, args);
        }
        
        public System.Threading.Tasks.Task<bool> IsCurrentlyExecutingAsync(string triggerName, string password)
        {
            return base.Channel.IsCurrentlyExecutingAsync(triggerName, password);
        }
        
        public System.Threading.Tasks.Task<bool> IsCurrentlyExecutingUserAsync(string triggerName, string userID, string password)
        {
            return base.Channel.IsCurrentlyExecutingUserAsync(triggerName, userID, password);
        }
        
        public System.Threading.Tasks.Task InterruptAsync(string triggerName, string password)
        {
            return base.Channel.InterruptAsync(triggerName, password);
        }
        
        public System.Threading.Tasks.Task InterruptUserAsync(string triggerName, string userID, string password)
        {
            return base.Channel.InterruptUserAsync(triggerName, userID, password);
        }
        
        public System.Threading.Tasks.Task PauseAsync(string triggerName, string password)
        {
            return base.Channel.PauseAsync(triggerName, password);
        }
        
        public System.Threading.Tasks.Task PauseUserAsync(string triggerName, string userID, string password)
        {
            return base.Channel.PauseUserAsync(triggerName, userID, password);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_ITriggerJobService))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("이름이 \'{0}\'인 엔드포인트를 찾을 수 없습니다.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_ITriggerJobService))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.1.2:8000/mozart/TriggerJobService");
            }
            throw new System.InvalidOperationException(string.Format("이름이 \'{0}\'인 엔드포인트를 찾을 수 없습니다.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return TriggerJobServiceClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_ITriggerJobService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return TriggerJobServiceClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_ITriggerJobService);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_ITriggerJobService,
        }
    }
}
